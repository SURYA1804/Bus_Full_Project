@page "/ViewSeats"
@using Details
@using Table
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<body style="background-color:rgb(97, 231, 162);">
<center><h3 class = "head">Seats</h3></center>
<table class="detail-table">
<thead class="thead-dark">
<tr>
<th>Seat Id</th>
<th>Seat Type</th>
<th>Seat Place</th>
<th>Seat Price</th>
<th>Status</th>
<th>Select</th>
</tr>
</thead>
<tbody>
      @foreach (var record in SeatDetails.Seats)
      {
        var IsBooked = BookedSeatsDetails.BookedSeats.Any(s => s.SeatId == record.SeatId && s.BusId == record.BusId && s.Slot == BookingDetails.SelectedDate && s.RouteId == BookingDetails.Route.RouteId);
  <tr>
  <td> @record.SeatId </td>
  <td> @record.SeatType </td>
  <td > @record.SeatPlace </td>
  <td> @record.SeatPrice </td>
  <td> @(IsBooked ? "Booked" : "Available")</td>
  <td>  @if (!IsBooked)
            {
    <center>
    <input type = "checkbox" @onchange = "(e) =>SelectSeats(e,record.SeatId,record.SeatPrice,record.SeatType,record.SeatPlace)">
    </center>
            }
  </td>
  </tr>
      }
</tbody>
  </table>
  <br>

        <br>
  <div class ="button-container">
  <button type="button" class="custom-btn" @onclick="Back">Back</button>
  <button type="button" class="custom-btn" @onclick="Book">Book</button>
  </div>
  </body>
  <style>
  .button-container {
    display: flex;
    justify-content: space-between; 
  }
  .detail-table {
    border-collapse: separate;
    margin: auto auto; 
    width: 60%; 
    font-family: Arial, sans-serif; 
    border-spacing: 0 8px; 
  }

  .detail-table tr { 
    background-color: #e8f5e9; 
    transition: background-color 0.3s ease; 
  }

  .detail-table tr:hover { 
    background-color: #c8e6c9; 
  }

  .detail-table th,
  .detail-table td {
    border: 1px solid #a5d6a7; 
    padding: 20px; 
    text-align: left; 
    vertical-align: middle;
  }

  .detail-table th {
    font-weight: bold;
    background-color: #66bb6a; 
    color: #ffffff;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border-radius: 5px; 
  }

  .detail-table td {
    color: #2e7d32; 
    background-color: #ffffff;
    border-radius: 5px; 
    white-space: nowrap; 
  }

  .detail-table tr:nth-child(odd) td {
    background-color: #f1f8e9;
  }

  .custom-btn {
    background-color: #4CAF50;
    color: white; 
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
  }

  .custom-btn:hover {
    background-color: #3e8e41;
  }
  .head
  {
  background-color: #28a745; 
  color:#eef4f3;
  width: 95%;
  padding: 20px 20px;
  font-size: 25px;
  font-weight: bold;
  border-radius: 25px;
  text-align: center;
  }
  </style>

@code
{

  private async Task SelectSeats(ChangeEventArgs e, string SeatId, int SeatPrice, string SeatType, string SeatPlace)
  {
    DiscountDetails.SetDiscountDetails();
    int FinalPrice, DiscountRate = 0;
    var discount = DiscountDetails.DiscountOffer.FirstOrDefault(item => item.SeatType == SeatType && item.BusName == BookingDetails.BusName);
    if (discount != null)
    {
      DiscountRate = discount.DiscountRate;
    }
    FinalPrice = SeatPrice - (SeatPrice * DiscountRate / 100);
    BookingDetailsTable seat = new BookingDetailsTable
      {
        BusId = BookingDetails.BusId,
        BusName = BookingDetails.BusName,
        SeatId = SeatId,
        SeatPrice = FinalPrice,
        SeatType = SeatType,
        SeatPlace = SeatPlace,
        DiscountRate = DiscountRate
      };

    if ((bool)e.Value)
    {
      BookingDetails.BookingSeats.Add(seat);
    }
    else
    {
      BookingDetails.BookingSeats.Remove(seat);
    }
  }
  private async Task Book()
  {

    NavigationManager.NavigateTo("/BookSeats");
  }
  private async Task Back()
  {
    SeatDetails.Seats.Clear();
    BookingDetails.BookingSeats.Clear();
    NavigationManager.NavigateTo("/ViewBus");
  }
}